@page "/"
@rendermode InteractiveServer
@{
    var l = new List<string>();
    l.Add("glay");
    l.Add("light-glay");
    l.Add("gold");
    l.Add("caramel");
    l.Add("sand");
    l.Add("coffee");
    l.Add("brown");
    l.Add("red-brown");
    l.Add("orange");
    l.Add("yellow-green");
    l.Add("green");
    l.Add("mint");
    l.Add("emerald");
    l.Add("emerald-indigo");
    l.Add("indigo");
    l.Add("aqua");
    l.Add("alice-blue");
    l.Add("lavender");
    l.Add("rose");
    l.Add("violet");
}

<style type="text/css">
    .scheme-panel {
        display: inline-block;
        margin-right: 6px;
        cursor: pointer;
    }

    .scheme-panel:hover {
        background-color: #eeeeee;
    }
</style>

<h2>Sample component</h2>

<div>
    @foreach (var item in l)
    {
        <span class="scheme-panel" onclick="document.documentElement.setAttribute('color-scheme','@item')">@item</span>
    }
</div>
<div>
    @for (int i = 0; i < 10; i++)
    {
        <span style="display: inline-block; width: 60px; height: 60px;background-color: var(--color-primary-0@(i+1));"></span>
    }
</div>

<div style="width: 80%; margin-bottom: 400px; padding-bottom: 400px;">
    <Button Text="Save"></Button>
    <LoadingPanel></LoadingPanel>
    <FileUploadPanel></FileUploadPanel>

    <InputFieldPanel Text="Field1">
        <InputText @bind-Value="@Value1" class="textbox"></InputText>
    </InputFieldPanel>

    <InputFieldPanel_RecordList Text="User list" OnRecordAdded="AddUser">
        @{
            var sortIndex = 0;
            foreach (var rUser in this.SelectedUserList)
            {
                <ToggleRecordPanel HeaderText="@rUser.Name" AllowDelete="true" Deleted="e => this.DeleteUser(rUser)"
                                   AllowSort="true" SortGroup="SortGroup" SortIndex="@sortIndex" OnItemDropped="OnUserDropped">
                    <ContentPanel>
                        <div class="permission-list-panel">
                            <CheckboxPanel @bind-Value="@rUser.IsAdministrator">Admin</CheckboxPanel>
                        </div>
                    </ContentPanel>
                </ToggleRecordPanel>
                sortIndex++;
            }
        }
    </InputFieldPanel_RecordList>

    <InputFieldPanel_RecordList Text="User list" OnRecordAdded="AddUser">
        @foreach (var item in this.SelectedUserList)
        {
            <div class="record-panel" style="padding: 4px 8px;display: flex; align-items: center;" tabindex="0">
                <span class="user-record-panel">@item.Name</span>
                <span class="age" style="color: #888888;">@item.Age</span>
                <img src="@HigLabo.Web.Internal.UrlInfo.GetIconUrl(Higlabo__.Delete__svg)" @onclick="e => DeleteUser(item)" tabindex="0"
                     style="width: 16px; height: 16px;margin-left: auto;" />
            </div>
        }
    </InputFieldPanel_RecordList>

    <InputFieldPanel_Record Text="Person in charge" Loading="LoadingRecordList" OnRecordSelected="RecordSelected">
        <RecordPanel>
            @if (this.SelectedUser == null)
            {
                <div>Select user</div>
            }
            else
            {
                <div style="padding: 4px 8px;">
                    <span class="user-record-panel">@this.SelectedUser.Name</span>
                    <span class="age">@this.SelectedUser.Age</span>
                </div>
            }
        </RecordPanel>
    </InputFieldPanel_Record>

    <InputFieldPanel Text="Field1">
        <InputTextArea @bind-Value="@Value2" class="textarea"></InputTextArea>
    </InputFieldPanel>
   
    <InputFieldPanel_SelectButton Text="file mode" RecordList="InputFieldPanel_SelectButton.CreateRecordList<FileAccess>()"
                                  SelectedValue="@this.FileAccess.ToStringFromEnum()"
                                  ValueChanged="v => this.FileAccess = v.ToEnum<FileAccess>()!.Value"></InputFieldPanel_SelectButton>

    <span>@this.FileAccess.ToStringFromEnum()</span>

    <InputFieldPanel_Time Layout="InputFieldPanelLayout.Default" Text="StartTime" @bind-Value="@this.Time"></InputFieldPanel_Time>
    <InputFieldPanel_TimeDuration SelectEndTimeMode="SelectEndTimeMode.EndTime" Layout="InputFieldPanelLayout.Default" 
    Text="Start-End" @bind-StartTime="@this.StartTime" @bind-EndTime="@this.EndTime"></InputFieldPanel_TimeDuration>
    <InputFieldPanel_TimeDuration SelectEndTimeMode="SelectEndTimeMode.Duration" Layout="InputFieldPanelLayout.Default" 
    Text="Time duration" @bind-StartTime="@this.StartTime" @bind-EndTime="@this.EndTime"></InputFieldPanel_TimeDuration>
    <time>@this.StartTime - @this.EndTime</time>

    <InputFieldPanel_Date Layout="InputFieldPanelLayout.Default" Text="Date" @bind-Value="@this.Date"></InputFieldPanel_Date>
    <span>@this.Date</span>
    <InputFieldPanel_DateDuration Text="Start-End" StartDate="@this.StartDate" EndDate="@this.EndDate"></InputFieldPanel_DateDuration>
    <span>@this.StartDate</span>
    <span>@this.EndDate</span>

    <InputFieldPanel_Date Layout="InputFieldPanelLayout.Flex" Text="Date" @bind-Value="@this.Date"></InputFieldPanel_Date>
    <InputFieldPanel_DateDuration Layout="InputFieldPanelLayout.Flex" Text="Field4" StartDate="@this.StartDate" EndDate="@this.EndDate"></InputFieldPanel_DateDuration>

    <InputFieldPanel_Color Text="Back color"></InputFieldPanel_Color>
    <InputFieldPanel_Color Layout="InputFieldPanelLayout.Flex" Text="Fore color"></InputFieldPanel_Color>
    <span>@this.Color</span>
</div>


@code {
    public class UserRecord
    {
        public ToggleState ToggleState { get; set; } = ToggleState.Hidden;
        public Guid UserId { get; set; } = Guid.NewGuid();
        public string Name { get; set; } = "";
        public int Age { get; set; } = 22;
        public bool IsAdministrator { get; set; } = false;
    }

    [Parameter]
    public string Value1 { get; set; } = "";
    [Parameter]
    public string Value2 { get; set; } = "";

    [Parameter]
    public TimeSpan? Time { get; set; }

    [Parameter]
    public TimeSpan? StartTime { get; set; }
    [Parameter]
    public TimeSpan? EndTime { get; set; }
    [Parameter]
    public DateOnly? Date { get; set; } 
    [Parameter]
    public string StartDate { get; set; } = "";
    [Parameter]
    public string EndDate { get; set; } = "";

    [Parameter]
    public string Color { get; set; } = "";

    [Parameter]
    public FileAccess FileAccess { get; set; }
    [Parameter]
    public bool SelectDateCalendarPanelVisible { get; set; } = false;
    [Parameter]
    public bool SelectDateDurationCalendarPanelVisible { get; set; } = false;

    [Parameter]
    public UserRecord SelectedUser { get; set; } = new() { Name = "Higty", Age = 22 };
    [Parameter]
    public List<UserRecord> SelectedUserList { get; init; } = new();
    [Parameter]
    public SortGroup SortGroup { get; set; } = new();

    private void AddUser()
    {
        var r = new UserRecord();
        r.Name = "Higty" + DateTime.Now.Second;
        r.Age = DateTime.Now.Second;
        this.SelectedUserList.Add(r);
    }
    private void DeleteUser(UserRecord record)
    {
        this.SelectedUserList.Remove(record);
    }
    private void LoadingRecordList(InputFieldPanel_Record.LoadingEventArgs e)
    {
        var l = new List<InputFieldPanel_Record.Record>();
        l.Clear();
        for (int i = 0; i < 20; i++)
        {
            l.Add(new InputFieldPanel_Record.Record("User" + i, i));
        }

        e.RecordList.Clear();
        if (e.SearchText.IsNullOrEmpty())
        {
            e.RecordList.AddRange(l);
        }
        else
        {
            e.RecordList.AddRange(l.FindAll(el => el.Text.Contains(e.SearchText)));
        }
    }
    private void OnUserDropped(ItemDroppedEventArgs e)
    {
        SortGroup.Sort(this.SelectedUserList, e);
    }


    private void RecordSelected(InputFieldPanel_Record.Record record)
    {
        var r = new UserRecord();
        r.Name = record.Text;
        r.Age = (int?)record.Value ?? 0;
        this.SelectedUser = r;
    }
    private void DateDurationSelected((DateOnly? StartDate, DateOnly? EndDate) value)
    {
        var v = value;
        if (v.StartDate.HasValue)
        {
            this.StartDate = v.StartDate.Value.ToShortDateString();
        }
        if (v.EndDate.HasValue)
        {
            this.EndDate = v.EndDate.Value.ToShortDateString();
        }
        this.SelectDateDurationCalendarPanelVisible = false;
    }

}